### Pacotes utilizados no programa
import itertools
import string
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import scipy.stats as st


# -------------------- Entrada de Dados --------------------
def obter_dados_usuario():
    """
    Coleta as entradasiniciais do usuário, como número de componentes, tempo máximo de análise e o modelo de confiabilidade com seus parâmetros para cada componente.

    :return:
    n_component (int): O número de componentes no sistema.

    tempos (numpy.ndarray): Um array NumPy contendo os pontos de tempo para os quais a confiabilidade será calculada.

    modelos (dict): Um dicionário onde as chaves são letras (a, b, c...) representando os componentes e os valores são tuplas contendo o tipo de modelo de confiabilidade (Exponencial, Weibull, Lognormal) e seus respectivos parâmetros.
    """
    n_component = int(input('Digite o número de componentes do sistema (n): '))
    tempo_max = int(input('Instante tempo máximo (t): '))

    n_partes = int(input('Número de intervalos de tempo: '))
    tempos = np.linspace(0, tempo_max, n_partes + 1)
    tempos[0] += 0.01  # Evita log(0) em modelos lognormais

    modelos = {}
    for i in range(n_component):
        tipo = selecionar_modelo(i)
        parametros = obter_parametros_modelo(tipo)
        modelos[string.ascii_lowercase[i]] = parametros

    return n_component, tempos, modelos


def selecionar_modelo(i):
    """
    Solicita ao usuário que escolha o tipo de modelo de confiabilidade (Exponencial, Weibull, Lognormal) para um componente específico, garantindo uma entrada válida.
    :param i(int): O índice do componente para o qual o modelo está sendo selecionado (usado para exibir mensagens amigáveis ao usuário como "Modelo para o componente 1").
    :return:
    tipo(int): Um número inteiro representando o modelo selecionado (1 para Exponencial, 2 para Weibull, 3 para Lognormal).
    """
    print(f"\nModelo para o componente {i + 1}")
    print("1 - Exponencial\n2 - Weibull\n3 - Lognormal")
    while True:
        try:
            tipo = int(input("Escolha uma das opções: "))
            if tipo in [1, 2, 3]:
                return tipo
        except ValueError as e:
            print(f"Erro: {e}")


def obter_parametros_modelo(tipo):
    """
    Coleta os parâmetros específicos para o modelo de confiabilidade selecionado pelo usuário.
    :param tipo(int): O tipo de modelo de confiabilidade para o qual os parâmetros serão obtidos (1 para Exponencial, 2 para Weibull, 3 para Lognormal).
    :return:
    tuple: Uma tupla contendo o nome do modelo (string) e seus parâmetros. Por exemplo, ("Exponencial", alfa), ("Weibull", alfa, delta) ou ("Lognormal", mu, sigma).
    """
    if tipo == 1:
        alfa = float(input("Valor de alfa (Exponencial): "))
        return ("Exponencial", alfa)
    elif tipo == 2:
        alfa = float(input("Valor de alfa (Weibull): "))
        delta = float(input("Valor de delta (Weibull): "))
        return ("Weibull", alfa, delta)
    elif tipo == 3:
        mu = float(input("Valor de mu (Lognormal): "))
        sigma = float(input("Valor de sigma (Lognormal): "))
        return ("Lognormal", mu, sigma)


# -------------------- Tabela Verdade --------------------
def gerar_tabela_verdade(n_component):
    """
    Constrói a tabela verdade do sistema, definindo o funcionamento do sistema para cada combinação de estados dos componentes, com interação do usuário.
    :param n_component(int): O número de componentes no sistema.
    :return:
    headers(list): Uma lista de strings que representam os cabeçalhos da tabela verdade (por exemplo, ['a', 'b', 'c', 'Sistema']).
    tabela(list): Uma lista de tuplas, onde cada tupla representa uma linha da tabela verdade. Cada tupla contém os estados dos componentes (0 ou 1) e o estado correspondente do sistema (0 ou 1).
    """
    headers = list(string.ascii_lowercase[:n_component]) + ['Sistema']
    combinacoes = list(itertools.product([0, 1], repeat=n_component))
    sistema = []

    print("\nDigite 0 ou 1 para indicar se o sistema funciona nessa combinação:")
    for i, linha in enumerate(combinacoes):
        while True:
            try:
                entrada = int(input(f"Linha {i + 1} {linha} -> Sistema funciona? (0/1): "))
                if entrada in [0, 1]:
                    sistema.append(entrada)
                    break
            except ValueError as e:
                print(f"Erro: {e}")
            print("Entrada inválida! Digite 0 ou 1.")

    tabela = [linha + (sistema[i],) for i, linha in enumerate(combinacoes)]
    return headers, tabela


# -------------------- Cálculo de Confiabilidade --------------------
def calcular_confiabilidade_componentes(tempo, modelos):
    """
    Calcula a confiabilidade individual de cada componente em um dado instante de tempo, com base em seus modelos e parâmetros.
    :param tempo(float): O instante de tempo no qual a confiabilidade dos componentes será calculada.
    :param modelos(dict): Um dicionário contendo os modelos de confiabilidade e seus parâmetros para cada componente, conforme obtido de obter_dados_usuario().
    :return:
    confiabilidades(list): Uma lista de listas, onde cada sublista contém o nome do modelo do componente e sua confiabilidade calculada para o tempo fornecido.
    """
    confiabilidades = []
    for i, chave in enumerate(modelos):
        modelo, *param = modelos[chave]
        if modelo == 'Exponencial':
            resultado = np.exp(-tempo / param[0])  # Confiabilidade do Modelo Exponencial
        elif modelo == 'Weibull':
            resultado = np.exp(-1*(tempo / param[0]) ** param[1])  # Confiabilidade do Modelo Weibull
            # RuntimeWarning: invalid value encountered in scalar power, significa que você está tentando calcular uma potência com base negativa e expoente fracionário, o que resulta em um número complexo ou NaN no NumPy, e não é permitido em operações escalares reais.
        elif modelo == 'Lognormal':
            z = -1 * (np.log(tempo) - param[0]) / param[1]  # Confiabilidade do Modelo Lognormal
            resultado = st.norm.cdf(z, loc=0, scale=1)
        else:
            resultado = 0
        confiabilidades.append([modelo, resultado])
    return confiabilidades


def calcular_confiabilidade_sistema(tabela_verdade, confiabilidade_modelo):
    """
    Calcula a confiabilidade geral do sistema em um dado instante de tempo, utilizando a tabela verdade e as confiabilidades dos componentes.
    :param tabela_verdade(list): A tabela verdade do sistema, conforme gerada por gerar_tabela_verdade().
    :param confiabilidade_modelo(list): Uma lista contendo as confiabilidades individuais de cada componente, obtida de calcular_confiabilidade_componentes().
    :return:
    float: A confiabilidade total do sistema para o instante de tempo considerado.
    """
    conf_component = [float(item[1]) for item in confiabilidade_modelo]
    funcionamento = [linha[-1] for linha in tabela_verdade]
    tabela = [linha[:-1] for linha in tabela_verdade]

    confiabilidades_totais = []

    for idx, linha in enumerate(tabela):
        valores = [(conf_component[i] if bit else 1 - conf_component[i]) for i, bit in enumerate(linha)]
        confiab_linha = np.prod(valores) * funcionamento[idx]
        confiabilidades_totais.append(confiab_linha)

    return sum(confiabilidades_totais)


# -------------------- Saída: Tabela e Gráficos --------------------
def exibir_tabela(headers, table):
    """
    Formata e imprime a tabela verdade do sistema no console de forma organizada.
    :param headers(list): Uma lista de strings que são os cabeçalhos da tabela.
    :param table(list): Uma lista de tuplas ou listas, onde cada elemento representa uma linha da tabela.
    :return: None
    """
    colunas = len(headers)
    linhas_formatadas = ["+" + "+".join(["-" * 7] * colunas) + "+"]
    linhas_formatadas.append("|" + "|".join(h.center(7) for h in headers) + "|")
    linhas_formatadas.append("+" + "+".join(["-" * 7] * colunas) + "+")
    for linha in table:
        linhas_formatadas.append("|" + "|".join(str(val).center(7) for val in linha) + "|")
    linhas_formatadas.append("+" + "+".join(["-" * 7] * colunas) + "+")
    print('\n'.join(linhas_formatadas))


# Função para exibir as confiabilidades do sistema de forma tabular
def exibir_confiabilidade(tempo, confiabilidades):
    print("\n Tempo | Confiabilidade")
    print("-" * 23)
    for t, confiabilidade in zip(tempo, confiabilidades):
        print(f"{t:^6} | {confiabilidade:^15.8f}")


def gerar_grafico(tempos, confiabilidades):
    """
    Cria e exibe um gráfico da confiabilidade do sistema ao longo do tempo usando matplotlib.
    :param tempos(numpy.ndarray): Um array NumPy contendo os instantes de tempo.
    :param confiabilidades(list): Uma lista contendo as confiabilidades do sistema
    :return: None
    """
    df = pd.DataFrame({'Tempo': tempos, 'Confiabilidade': confiabilidades})
    plt.figure(figsize=(10, 6))
    plt.plot(df['Tempo'], df['Confiabilidade'], linestyle='-', color='blue')
    plt.title('Confiabilidade do Sistema ao Longo do Tempo')
    plt.xlabel('Tempo (t)')
    plt.ylabel('Confiabilidade')
    plt.grid(True)
    plt.tight_layout()
    plt.show()


# -------------------- Execução principal --------------------
def main():
    n, tempos, modelos = obter_dados_usuario()
    headers, tabela = gerar_tabela_verdade(n)
    exibir_tabela(headers, tabela)

    confiabilidades_sistema = []
    for t in tempos:
        confiab_comp = calcular_confiabilidade_componentes(t, modelos)
        confiab_total = calcular_confiabilidade_sistema(tabela, confiab_comp)
        confiabilidades_sistema.append(confiab_total)

    exibir_confiabilidade(tempos, confiabilidades_sistema)
    gerar_grafico(tempos, confiabilidades_sistema)


# -------------------- Rodar programa --------------------
if __name__ == "__main__":
    main()
